package com.boventech.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.boventech.demo.entity.Answer;
import com.boventech.demo.entity.KnowledgePoint;
import com.boventech.demo.entity.Question;
import com.boventech.demo.service.QuestionService;
import com.google.common.collect.Lists;

@Controller
@SessionAttributes({ "questions", "content" })
@RequestMapping(value = "/question")
public class QuestionController {

    @Autowired
    private QuestionService questionService;

    /**
     * 前往子题录入页面
     * 
     * @return
     */
    @RequestMapping(value = "add")
    public String add(ModelMap model, String content) {
        if (content != null) {
            model.addAttribute("content", content);
        }
        return "question/add";
    }
    
    /**
     * 题目录入
     * 
     * @param question
     * @param options
     * @param rightAnswer
     * @param model
     * @return
     */

    @RequestMapping(method = RequestMethod.POST)
    public String create(Question question, String[] options, String[] knowledges, int[] rightAnswer,
            ModelMap model, @ModelAttribute("questions") List<Question> questions) {
        List<Answer> answers = Lists.newArrayList();
        List<KnowledgePoint> points = Lists.newArrayList();

        // 录入选项答案
        for (int i = 0; i < options.length; i++) {
            Answer optionalAnswer = new Answer();
            for (int m : rightAnswer) {
                if (i == m - 1) {
                    optionalAnswer.setRight(true);
                }
            }
            optionalAnswer.setContent(options[i]);
            answers.add(optionalAnswer);
        }

        // 录入知识点
        for (String knowledgePoint : knowledges) {
            KnowledgePoint point = this.questionService.findKnowledgePointById(knowledgePoint);
            points.add(point);
        }
        question.setAnswers(answers);
        question.setKnowledgePoints(points);
        questions.add(question);

        model.addAttribute("questions", questions);
        return "redirect:/testQuestion/combination";
    }

    /**
     * 选择题选项
     * 
     * @return
     */
    @RequestMapping(value = "choice", method = RequestMethod.GET)
    public String choiceQuestion() {
        return "question/choice/index";
    }

    /**
     * 判断题选项
     * 
     * @return
     */
    @RequestMapping(value = "rightOrWrong", method = RequestMethod.GET)
    public String rightOrWrongQuestion() {
        return "question/rightorwrong/index";
    }

   

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String destroy(@PathVariable String id) {
        return null;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    String update(@PathVariable String id, Question question) {
        return null;
    }

}
