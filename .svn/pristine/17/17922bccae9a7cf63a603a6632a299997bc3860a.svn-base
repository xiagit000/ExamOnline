/*
 * Copyright 2010. 
 * 
 * This document may not be reproduced, distributed or used 
 * in any manner whatsoever without the expressed written 
 * permission of Boventech Corp. 
 * 
 * $Rev: Rev $
 * $Author: Author $
 * $LastChangedDate: LastChangedDate $
 *
 */

package com.boventech.demo.controller;

import java.io.File;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.boventech.demo.entity.AnswerRecord;
import com.boventech.demo.entity.Exam;
import com.boventech.demo.service.AnswerRecordService;
import com.boventech.demo.service.ExamService;
import com.boventech.demo.util.Cartogram;
import com.boventech.demo.util.Paging;

/**
 * @author peng.xia
 * 
 */
@Controller
@RequestMapping(value = "/answerRecord")
public class AnswerRecordController {

    @Autowired
    AnswerRecordService answerRecordService;

    @Autowired
    ExamService examService;

    /**
     * 保存答题记录
     */
    @RequestMapping(method = RequestMethod.POST)
    public String save(String examId, String[] questionIds, String[] answerIds) {

        AnswerRecord answerRecord = this.answerRecordService.getAnswerRecord(examId, questionIds, answerIds);
        this.answerRecordService.save(answerRecord);
        return "redirect:/answerRecord/" + answerRecord.getId();
    }

    /**
     * 遍历答题记录
     */
    @RequestMapping(method = RequestMethod.GET)
    public String index(Paging paging, ModelMap model, String date, String content) {
        List<AnswerRecord> answerRecords = this.answerRecordService.findAll(paging.getPage(), date, content);
        model.addAttribute("answerRecords", answerRecords);
        model.addAttribute("date", date);
        model.addAttribute("content", content);
        return "/answerRecord/index";
    }

    /**
     * 显示答题记录
     */
    @RequestMapping(value = "{id}", method = RequestMethod.GET)
    public String show(@PathVariable String id, ModelMap model) {
        AnswerRecord answerRecord = this.answerRecordService.findById(id);
        Exam exam = this.examService.findById(answerRecord.getExam().getId());
        int[] examInfo = this.examService.getExamInfo(exam);
        model.addAttribute("answerRecord", answerRecord);
        model.addAttribute("exam", exam);
        model.addAttribute("choices", examInfo[0]);
        model.addAttribute("rightOrWrongs", examInfo[1]);
        model.addAttribute("combinations", examInfo[2]);

        return "/answerRecord/show";
    }

    /**
     * 结果统计
     */
    @RequestMapping(value = "{id}/statistics", method = RequestMethod.GET)
    public String count(@PathVariable String id, ModelMap model, HttpServletRequest request) {
        AnswerRecord answerRecord = this.answerRecordService.findById(id);
        Cartogram cartogram = new Cartogram();
        String staImg = cartogram.getBarChart(request.getSession().getServletContext().getRealPath(""),
                answerRecord);
        String staImg2 = cartogram.getPieChart(request.getSession().getServletContext().getRealPath(""),
                answerRecord);
        model.addAttribute("img1", staImg);
        model.addAttribute("img2", staImg2);
        return "/answerRecord/statistics/index";
    }

    /**
     * 结果分析
     */
    @RequestMapping(value = "{id}/analysis", method = RequestMethod.GET)
    public String analysis(@PathVariable String id, ModelMap model) {

        return "/answerRecord/analysis/index";
    }

    /**
     * 清除统计图
     */
    @RequestMapping(value = "{name}/delete", method = RequestMethod.GET)
    public String deleteImg(@PathVariable String name, ModelMap model, HttpServletRequest request) {
        String path = request.getSession().getServletContext().getRealPath("") + "/resources/img/statistics/"
                + name;
        File file = new File(path);
        if (file.exists()) {
            file.delete();
        }
        return "/answerRecord/analysis/index";
    }

}
