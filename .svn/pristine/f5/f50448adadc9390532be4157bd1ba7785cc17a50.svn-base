/*
 * Copyright 2010. 
 * 
 * This document may not be reproduced, distributed or used 
 * in any manner whatsoever without the expressed written 
 * permission of Boventech Corp. 
 * 
 * $Rev: 45 $
 * $Author: liang.zhou $
 * $LastChangedDate: 2013-01-23 15:32:43 +0800 (星期三, 23 一月 2013) $
 *
 */

package com.boventech.demo.entity;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;

@Entity
@Table(name = "testQuestion")
@PrimaryKeyJoinColumn(name = "id")
public class TestQuestion extends BaseQuestion {

    // 包含的子题
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinColumn(name = "testQuestion_id")
    private List<Question> Questions;

    // 所包含的知识点
    @ManyToMany(cascade = CascadeType.REFRESH)
    @JoinTable(name = "testQuestion_knowledgePoint", inverseJoinColumns = @JoinColumn(name = "knowledgePoint_id", referencedColumnName = "id"), joinColumns = @JoinColumn(name = "testQuestion_id", referencedColumnName = "id"))
    private List<KnowledgePoint> knowledgePoints;

    /**
     * @return the questions
     */
    public List<Question> getQuestions() {
        return Questions;
    }

    /**
     * @param questions
     *            the questions to set
     */
    public void setQuestions(List<Question> questions) {
        Questions = questions;
    }

    /**
     * @return the knowledgePoints
     */
    public List<KnowledgePoint> getKnowledgePoints() {
        return knowledgePoints;
    }

    /**
     * @param knowledgePoints
     *            the knowledgePoints to set
     */
    public void setKnowledgePoints(List<KnowledgePoint> knowledgePoints) {
        this.knowledgePoints = knowledgePoints;
    }

}
