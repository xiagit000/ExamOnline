package com.boventech.demo.controller;

import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.boventech.demo.entity.Answer;
import com.boventech.demo.entity.CombinedQuestion;
import com.boventech.demo.entity.KnowledgePoint;
import com.boventech.demo.entity.SingleQuestion;
import com.boventech.demo.service.CombinedQuestionService;
import com.boventech.demo.service.SingleQuestionService;
import com.google.common.collect.Lists;

@Controller
@RequestMapping(value = "/singleQuestion")
public class SingleQuestionController {

    @Autowired
    private SingleQuestionService questionService;
    
    @Autowired
    private CombinedQuestionService combinedQuestionService;

    /**
     * 前往子题录入页面
     */
    @RequestMapping(value = "{id}/add")
    public String add(ModelMap model, @PathVariable String id) {
        model.addAttribute("id", id);
        return "singleQuestion/add";
    }

    /**
     * 题目录入
     */
    @RequestMapping(method = RequestMethod.POST)
    public String create(SingleQuestion question, String[] options, String[] knowledges, int[] rightAnswer,
            ModelMap model,String id) {
        List<Answer> answers = Lists.newArrayList();
        List<KnowledgePoint> points = Lists.newArrayList();

        // 录入选项答案
        for (int i = 0; i < options.length; i++) {
            Answer optionalAnswer = new Answer();
            for (int m : rightAnswer) {
                if (i == m - 1) {
                    optionalAnswer.setRight(true);
                }
            }
            optionalAnswer.setContent(options[i]);
            answers.add(optionalAnswer);
        }

        // 录入知识点
        for (String knowledgePoint : knowledges) {
            KnowledgePoint point = this.questionService.findKnowledgePointById(knowledgePoint);
            points.add(point);
        }
        question.setAnswers(answers);
        question.setKnowledgePoints(points);
        
        CombinedQuestion combinedQuestion=this.combinedQuestionService.findById(id);
        combinedQuestion.getQuestions().add(question);
        
        
        this.combinedQuestionService.update(this.defineCombinedQuestion(combinedQuestion));
        return "redirect:/combinedQuestion/"+id+"/edit";
    }

    /**
     * 选择题选项
     */
    @RequestMapping(value = "choice", method = RequestMethod.GET)
    public String choiceQuestion() {
        return "singleQuestion/choice/index";
    }

    /**
     * 判断题选项
     */
    @RequestMapping(value = "rightOrWrong", method = RequestMethod.GET)
    public String rightOrWrongQuestion() {
        return "singleQuestion/rightorwrong/index";
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String destroy(@PathVariable String id) {
        return null;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    String update(@PathVariable String id, SingleQuestion question) {
        return null;
    }
    
    /**
     * 加入子题后，对组合题的其他属性进行赋值
     */
    private CombinedQuestion defineCombinedQuestion(CombinedQuestion combinedQuestion){
        Set<String> set = new HashSet<String>();
        List<KnowledgePoint> allPoints = Lists.newArrayList();
        int difficulty = 0;
        for (SingleQuestion q : combinedQuestion.getQuestions()) {
            q.setId(null);
            difficulty += q.getDifficulty();
            for (KnowledgePoint knowledgePoint : q.getKnowledgePoints()) {
                set.add(knowledgePoint.getId());
            }

        }

        // 定义组合题的难度为子题的平均值
        difficulty = difficulty / combinedQuestion.getQuestions().size();

        // 知识点为子题的并集
        Iterator<String> i = set.iterator();
        while (i.hasNext()) {
            KnowledgePoint point = this.combinedQuestionService.findKnowledgePointById(i.next());
            allPoints.add(point);
        }
        combinedQuestion.setDifficulty(difficulty);
        combinedQuestion.setKnowledgePoints(allPoints);
        return combinedQuestion;
    }

}
