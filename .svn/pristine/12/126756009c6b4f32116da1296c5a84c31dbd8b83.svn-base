/*
 * Copyright 2010. 
 * 
 * This document may not be reproduced, distributed or used 
 * in any manner whatsoever without the expressed written 
 * permission of Boventech Corp. 
 * 
 * $Rev: Rev $
 * $Author: Author $
 * $LastChangedDate: LastChangedDate $
 *
 */

package com.boventech.demo.controller;

import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.boventech.demo.entity.Answer;
import com.boventech.demo.entity.BaseQuestion.Type;
import com.boventech.demo.entity.KnowledgePoint;
import com.boventech.demo.entity.Question;
import com.boventech.demo.entity.TestQuestion;

import com.boventech.demo.service.KnowledgePointService;
import com.boventech.demo.service.TestQuestionService;
import com.boventech.demo.util.Paging;
import com.google.common.base.Strings;
import com.google.common.collect.Lists;

/**
 * @author Administrator
 * 
 */
@Controller
@SessionAttributes({ "questions", "content" })
@RequestMapping(value = "/testQuestion")
public class TestQuestionController {

    @Autowired
    private TestQuestionService testQuestionService;
    
    @Autowired
    private KnowledgePointService knowledgePointService;
    
    @RequestMapping(method = RequestMethod.GET)
    public String index(TestQuestion testQuestion, String difficultyOrder, String knowledgePointId,String knowledgePointContent,
            Paging paging, Model model) {
        if (difficultyOrder == null){
            difficultyOrder = "desc";
        }
        
        //知识点集合
        List<KnowledgePoint> knowledgePoints=Lists.newArrayList();
        KnowledgePoint knowledgePoint = null;
        if (!Strings.isNullOrEmpty(knowledgePointId)){
            String[] ids=knowledgePointId.split(";");
            for (String id : ids) {
                knowledgePoint = knowledgePointService.getById(id);
                knowledgePoints.add(knowledgePoint);
            }
        }
        
        List<TestQuestion> questionList = testQuestionService.search(testQuestion, difficultyOrder, knowledgePoints, paging);
        
        model.addAttribute("testQuestion", testQuestion);
        model.addAttribute("difficultyOrder", difficultyOrder);
        model.addAttribute("knowledgePointId", knowledgePointId);
        model.addAttribute("knowledgePointContent", knowledgePointContent);
        model.addAttribute("questionList", questionList);
        System.out.println("************");
        System.out.println(testQuestion.getType());
        return "testQuestion/index";
    }

    @RequestMapping(method = RequestMethod.POST)
    public String create(TestQuestion testQuestion, String[] options, String[] knowledges, int[] rightAnswer,
            ModelMap model, @ModelAttribute("questions") List<Question> questions) {
        List<KnowledgePoint> allPoints = Lists.newArrayList();
        
        // 对question进行封装
        if (testQuestion.getType() != Type.COMBINATION_QUESTION) {
            Question question = new Question();
            question.setContent(testQuestion.getContent());
            question.setDifficulty(testQuestion.getDifficulty());
            Type type = testQuestion.getType();

            if (type == Type.SINGLE_CHOICE) {
                question.setType(Type.SINGLE_CHOICE);
            }
            if (type == Type.MULTIPLE_CHOICE) {
                question.setType(Type.MULTIPLE_CHOICE);
            }
            if (type == Type.RIGHT_OR_WRONG) {
                question.setType(Type.RIGHT_OR_WRONG);
            }

            List<Answer> answers = Lists.newArrayList();
            List<KnowledgePoint> points = Lists.newArrayList();

            // 录入选项答案
            for (int i = 0; i < options.length; i++) {
                Answer optionalAnswer = new Answer();
                for (int m : rightAnswer) {
                    if (i == m - 1) {
                        optionalAnswer.setRight(true);
                    }
                }
                optionalAnswer.setContent(options[i]);
                answers.add(optionalAnswer);
            }

            // 录入知识点
            for (String knowledgePoint : knowledges) {
                KnowledgePoint point = this.testQuestionService.findKnowledgePointById(knowledgePoint);
                points.add(point);
            }
            question.setAnswers(answers);
            question.setKnowledgePoints(points);
            questions = Lists.newArrayList();
            questions.add(question);
        }

        Set<String> set = new HashSet<String>();
        int difficulty = 0;
        for (Question q : questions) {
            difficulty += q.getDifficulty();
            for (KnowledgePoint knowledgePoint : q.getKnowledgePoints()) {
                set.add(knowledgePoint.getId());
            }

        }

        // 定义组合题的难度为子题的平均值
        difficulty = difficulty / questions.size();

        // 知识点为子题的并集
        Iterator<String> i = set.iterator();
        while (i.hasNext()) {
            KnowledgePoint point = this.testQuestionService.findKnowledgePointById(i.next());
            allPoints.add(point);
        }

        testQuestion.setDifficulty(difficulty);
        testQuestion.setKnowledgePoints(allPoints);
        testQuestion.setQuestions(questions);
        model.addAttribute("questions", Lists.newArrayList());
        model.addAttribute("content", "");
        this.testQuestionService.save(testQuestion);

        return "redirect:testQuestion";
    }

    /**
     * 组合题
     * 
     * @return
     */
    @RequestMapping(value = "combination")
    public String combinationQuestion(ModelMap model, @ModelAttribute("questions") List<Question> questions,
            @ModelAttribute("content") String content) {
        model.addAttribute("subQuestions", questions);
        model.addAttribute("content", content);
        return "testQuestion/combination/add";
    }

    /**
     * 选择题
     * 
     * @return
     */
    @RequestMapping(value = "choice",method = RequestMethod.GET)
    public String choiceQuestion(ModelMap model, HttpSession session) {
        if (session.getAttribute("questions") == null) {
            model.addAttribute("questions", Lists.newArrayList());
        }
        if (session.getAttribute("content") == null) {
            model.addAttribute("content", "");
        }
        return "testQuestion/choice/add";
    }

    /**
     * 判断题
     * 
     * @return
     */
    @RequestMapping(value = "rightOrWrong", method = RequestMethod.GET)
    public String rightOrWrongQuestion(ModelMap model) {
        return "testQuestion/rightorwrong/add";
    }
}
