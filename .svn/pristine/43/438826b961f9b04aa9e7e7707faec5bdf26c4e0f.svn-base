/*
 * Copyright 2010. 
 * 
 * This document may not be reproduced, distributed or used 
 * in any manner whatsoever without the expressed written 
 * permission of Boventech Corp. 
 * 
 * $Rev: Rev $
 * $Author: Author $
 * $LastChangedDate: LastChangedDate $
 *
 */

package com.boventech.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.boventech.demo.entity.Answer;
import com.boventech.demo.entity.Answer.Score;
import com.boventech.demo.service.AnswerService;
import com.google.common.collect.Lists;

/**
 * @author Administrator
 * 
 */

@Controller
@RequestMapping(value = "/answer")
public class AnswerController {
    @Autowired
    private AnswerService answerService;
    private List<Answer> testAnswers;

    /**
     * 开始测试（重置试题）
     * 
     * @return
     */
    @RequestMapping(value = "/startExam", method = RequestMethod.GET)
    public String start() {
        return "redirect:/answer";
    }

    @RequestMapping(method = RequestMethod.GET)
    public String index(ModelMap model) {
        return "answer/answer";
    }

    /**
     * 提交答案并保存
     * 
     * @param id
     * @param answers
     * @return
     */
    @RequestMapping(method = RequestMethod.POST)
    public String save(String[] id, String[] answers) {
        testAnswers = Lists.newArrayList();
        for (int i = 0; i < id.length; i++) {
            Answer answer = new Answer();
            List<String> userAnswers = Lists.newArrayList();
            String questionId = id[i];
            String[] strs = answers[i].split(";");
            for (String userAnswer : strs) {
                userAnswers.add(userAnswer);
            }

            // 返回得分情况
            Score score = null;
            if (userAnswers.get(0).equals("true") || userAnswers.get(0).equals("false")) {
                score = this.answerService.compareUserAnswerWithStandardAnswer(questionId,
                        Boolean.valueOf(userAnswers.get(0)));
            } else {
                score = this.answerService.compareUserAnswerWithStandardAnswer(questionId, userAnswers);
            }

            // 封装到Answer并加入集合
            this.testAnswers.add(answer);
        }
        return "redirect:/answer/testReport";
    }

    @RequestMapping(value = "/testReport", method = RequestMethod.GET)
    public String report(ModelMap model) {
        model.addAttribute("answers", this.testAnswers);
        return "answer/testReport";
    }
}
